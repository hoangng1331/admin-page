import React from "react";
import {
  Table,
  Button,
  Popconfirm,
  Form,
  Input,
  message,
  Space,
  Modal,
  Select,
} from "antd";
import { DeleteOutlined, EditOutlined } from "@ant-design/icons";

import { axiosClient } from "../../../libraries/axiosClient";
import moment from "moment";

export default function Employees() {
  const [employees, setEmployees] = React.useState([]);
  const [selectedRecord, setSelectedRecord] = React.useState(null);
  const [refresh, setRefresh] = React.useState(0);
  const [editFormVisible, setEditFormVisible] = React.useState(false);
  const [accountLogin, setAccountLogin] = React.useState([]);
  const [number, setNumber] = React.useState();
  const [idSelect, setIdSelect] = React.useState();
  React.useEffect(() => {
    async function fetchData() {
      try {
        const response = await axiosClient.get("/login/");
        setAccountLogin(response.data.map((item,index) => item._id));
        console.log("Login:", accountLogin);
      } catch (error) {
        console.log(error);
      }
    }
    fetchData();
  }, []);

  const columns = [
    {
      title: 'STT', 
      width: '1%',
      render: (text, record, index) => {
        return (
          <div style = {{textAlign: 'right'}}>
            <span>{index+1}</span>
          </div>
        )
      },
      key: 'number',
    },
    {
      title: "H·ªç v√† t√™n",
      dataIndex: "fullName",
      key: "fullName",
      render: (text) => {
        return <strong style={{ color: "blue" }}>{text}</strong>;
      },
    },
    {
      title: "C√¥ng vi·ªác",
      dataIndex: "role",
      key: "role",
      width: "1%",
    },
    {
      title: "T√™n ƒëƒÉng nh·∫≠p",
      dataIndex: "username",
      key: "username",
      width: "1%",
    },
    {
      title: "M·∫≠t kh·∫©u",
      dataIndex: "password",
      key: "password",
      width: "1%",
    },
    {
      title: "ƒê·ªãa ch·ªâ",
      dataIndex: "address",
      key: "address",
      render: (text) => {
        return <em>{text}</em>;
      },
    },
    {
      title: "Th∆∞ ƒëi·ªán t·ª≠",
      dataIndex: "email",
      key: "email",
      width: "1%",
    },
    {
      title: "ƒêi·ªán tho·∫°i",
      dataIndex: "phoneNumber",
      key: "phoneNumber",
      width: "1%",
    },
    {
      title: "Ng√†y sinh",
      dataIndex: "birthday",
      key: "birthday",
      width: "1%",
      render: (text) => {
        return <span>{moment(text).format("DD/MM/yyyy")}</span>;
      },
    },
    {
      title: "",
      key: "actions",
      width: "1%",
      render: (text, record,index) => {
        return (
          <Space>
            <Popconfirm
              style={{ width: 800 }}
              title="Are you sure to delete?"
              onConfirm={() => {
                // DELETE
                const id = record._id;

                axiosClient
                  .delete("/employees/" + id)
                  .then((response) => {
                    message.success("X√≥a th√†nh c√¥ng!");
                    setRefresh((f) => f + 1);
                  })
                  .catch((err) => {
                    message.error("X√≥a b·ªã l·ªói!");
                  });
                console.log("DELETE", record);
                axiosClient
                  .delete("/login/" + accountLogin[idSelect])
                  .then((response) => {
                    message.success("X√≥a th√†nh c√¥ng!");
                    setRefresh((f) => f + 1);
                  })
                  .catch((err) => {
                    message.error("X√≥a b·ªã l·ªói!");
                  });
                console.log("DELETE", record);
              }}
              onCancel={() => {}}
              okText="ƒê·ªìng √Ω"
              cancelText="ƒê√≥ng"
            >
              <Button danger type="dashed" icon={<DeleteOutlined />} />
            </Popconfirm>
            <Button
              type="dashed"
              icon={<EditOutlined />}
              onClick={() => {
                const id = record._id;
                setIdSelect(index+1);
                axiosClient.get("/login/").then((response) => {
                  setAccountLogin(response.data.map((item) => item._id));
                  console.log("Login:", accountLogin);
                  setSelectedRecord(record);
                  console.log("Selected Record", id);
                  updateForm.setFieldsValue(record);
                  setEditFormVisible(true);
                  });             
                
                }}
            />
          </Space>
        );
      },
    },
  ];

  React.useEffect(() => {
    axiosClient.get("/employees").then((response) => {
      setEmployees(response.data);
      console.log(response.data);
    });
  }, [refresh]);

  const onFinish = (values) => {
    axiosClient
      .post("/employees", values)
      .then((response) => {
        message.success("Th√™m m·ªõi th√†nh c√¥ng!");
        createForm.resetFields();
        setRefresh((f) => f + 1);
      })
      .catch((err) => {
        message.error("Th√™m m·ªõi b·ªã l·ªói!");
      });
  };
  const onFinishFailed = (errors) => {
    console.log("üê£", errors);
  };

  const onUpdateFinish = async (values) => {
    axiosClient
      .patch("/employees/" + selectedRecord._id, values)
      .then((response) => {
                console.log("Select:", accountLogin[idSelect]);
        message.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
        updateForm.resetFields();
        setRefresh((f) => f + 1);
        setEditFormVisible(false);
      })
      .catch((err) => {
        message.error("C·∫≠p nh·∫≠t b·ªã l·ªói!");
      });

    await axiosClient
      .patch("/login/" + accountLogin[idSelect], values)
      .then((response) => {
        console.log("S·ª≠a Login:", accountLogin[idSelect]);
        message.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
        updateForm.resetFields();
        setRefresh((f) => f + 1);
        setEditFormVisible(false);
      })
      .catch((err) => {
        message.error("C·∫≠p nh·∫≠t b·ªã l·ªói!");
      });
  };

  const onUpdateFinishFailed = (errors) => {
    console.log("üê£", errors);
  };

  const [createForm] = Form.useForm();
  const [updateForm] = Form.useForm();
  const rowSelection = {
    onChange: (selectedRowKeys, selectedRows) => {
      console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);
    },
    getCheckboxProps: (record) => ({
      disabled: record.name === 'Disabled User',
      // Column configuration not to be checked
      name: record.name,
    }),
  };
  return (
    <div>
      <Form
        form={createForm}
        name="create-form"
        labelCol={{ span: 8 }}
        wrapperCol={{ span: 16 }}
        initialValues={{ remember: true }}
        onFinish={onFinish}
        onFinishFailed={onFinishFailed}
        autoComplete="on"
      >
        <Form.Item
          label="H·ªç v√† t√™n l√≥t"
          name="lastName"
          rules={[{ required: true, message: "Ch∆∞a nh·∫≠p H·ªç" }]}
          hasFeedback
        >
          <Input />
        </Form.Item>

        <Form.Item
          label="T√™n"
          name="firstName"
          rules={[{ required: true, message: "Ch∆∞a nh·∫≠p T√™n" }]}
          hasFeedback
        >
          <Input />
        </Form.Item>

        <Form.Item
          label="S·ªë ƒëi·ªán tho·∫°i"
          name="phoneNumber"
          rules={[{ required: true, message: "Ch∆∞a nh·∫≠p S·ªë ƒëi·ªán tho·∫°i" }]}
          hasFeedback
        >
          <Input placeholder="G·ªìm 10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0" />
        </Form.Item>

        <Form.Item
          hasFeedback
          label="Th∆∞ ƒëi·ªán t·ª≠"
          name="email"
          rules={[
            { required: true, message: "Ch∆∞a nh·∫≠p Th∆∞ ƒëi·ªán t·ª≠" },
            { type: "email", message: "Th∆∞ ƒëi·ªán t·ª≠ kh√¥ng h·ª£p l·ªá" },
          ]}
        >
          <Input placeholder="abc@gmail.com" />
        </Form.Item>

        <Form.Item
          label="ƒê·ªãa ch·ªâ"
          name="address"
          rules={[{ required: true, message: "Ch∆∞a nh·∫≠p ƒê·ªãa ch·ªâ" }]}
          hasFeedback
        >
          <Input placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, Qu·∫≠n/Huy·ªán, Th√†nh ph·ªë/T·ªânh" />
        </Form.Item>

        <Form.Item label="Ng√†y sinh" name="birthday">
          <Input placeholder="MM/DD/YYYY ho·∫∑c YYYY/MM/DD" />
        </Form.Item>
        <Form.Item
          label="V·ªã tr√≠ c√¥ng vi·ªác"
          name="role"
          rules={[{ required: true, message: "Ch∆∞a ch·ªçn v·ªã tr√≠ c√¥ng vi·ªác" }]}
          hasFeedback
        >
          <Select placeholder="Ch·ªçn v·ªã tr√≠ c√¥ng vi·ªác">
            <Select.Option value="ChƒÉm s√≥c kh√°ch h√†ng">
              ChƒÉm s√≥c kh√°ch h√†ng
            </Select.Option>
            <Select.Option value="Giao h√†ng">Giao h√†ng</Select.Option>
            <Select.Option value="Qu·∫£n l√Ω">Qu·∫£n l√Ω</Select.Option>
          </Select>
        </Form.Item>
        <Form.Item
          label="T√™n ƒëƒÉng nh·∫≠p"
          name="username"
          rules={[{ required: true, message: "Ch∆∞a nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" }]}
          hasFeedback
        >
          <Input />
        </Form.Item>
        <Form.Item
          label="M·∫≠t kh·∫©u"
          name="password"
          rules={[{ required: true, message: "Ch∆∞a nh·∫≠p m·∫≠t kh·∫©u" }]}
          hasFeedback
        >
          <Input />
        </Form.Item>
        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>
          <Button type="primary" htmlType="submit">
            Th√™m nh√¢n vi√™n
          </Button>
        </Form.Item>
      </Form>
      <Table rowKey="_id" dataSource={employees} columns={columns} rowSelection={rowSelection} scroll={{
      y: 400,
    }}/>
      <Modal
        centered
        open={editFormVisible}
        title="C·∫≠p nh·∫≠t th√¥ng tin"
        onOk={() => {
          updateForm.submit();
        }}
        onCancel={() => {
          setEditFormVisible(false);
        }}
        okText="L∆∞u th√¥ng tin"
        cancelText="ƒê√≥ng"
      >
        <Form
          form={updateForm}
          name="update-form"
          labelCol={{ span: 8 }}
          wrapperCol={{ span: 16 }}
          initialValues={{ remember: true }}
          onFinish={onUpdateFinish}
          onFinishFailed={onUpdateFinishFailed}
          autoComplete="on"
        >
          <Form.Item
            label="H·ªç"
            name="firstName"
            rules={[{ required: true, message: "Ch∆∞a nh·∫≠p H·ªç" }]}
            hasFeedback
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="T√™n"
            name="lastName"
            rules={[{ required: true, message: "Ch∆∞a nh·∫≠p T√™n" }]}
            hasFeedback
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="S·ªë ƒëi·ªán tho·∫°i"
            name="phoneNumber"
            rules={[{ required: true, message: "Ch∆∞a nh·∫≠p S·ªë ƒëi·ªán tho·∫°i" }]}
            hasFeedback
          >
            <Input />
          </Form.Item>

          <Form.Item
            hasFeedback
            label="Th∆∞ ƒëi·ªán t·ª≠"
            name="email"
            rules={[
              { required: true, message: "Ch∆∞a nh·∫≠p Th∆∞ ƒëi·ªán t·ª≠" },
              { type: "email", message: "Th∆∞ ƒëi·ªán t·ª≠ kh√¥ng h·ª£p l·ªá" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="ƒê·ªãa ch·ªâ"
            name="address"
            rules={[{ required: true, message: "Ch∆∞a nh·∫≠p ƒê·ªãa ch·ªâ" }]}
            hasFeedback
          >
            <Input />
          </Form.Item>

          <Form.Item label="Ng√†y sinh" name="birthday">
            <Input />
          </Form.Item>
          <Form.Item
            label="V·ªã tr√≠ c√¥ng vi·ªác"
            name="role"
            rules={[{ required: true, message: "Ch∆∞a ch·ªçn v·ªã tr√≠ c√¥ng vi·ªác" }]}
            hasFeedback
          >
            <Select placeholder="Ch·ªçn v·ªã tr√≠ c√¥ng vi·ªác" readOnly>
              <Select.Option value="ChƒÉm s√≥c kh√°ch h√†ng">
                ChƒÉm s√≥c kh√°ch h√†ng
              </Select.Option>
              <Select.Option value="Giao h√†ngr">Giao h√†ng</Select.Option>
              <Select.Option value="Qu·∫£n l√Ω">Qu·∫£n l√Ω</Select.Option>
            </Select>
          </Form.Item>
          <Form.Item
            label="T√™n ƒëƒÉng nh·∫≠p"
            name="username"
            rules={[{ required: true, message: "Ch∆∞a nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" }]}
            hasFeedback
          >
            <Input readOnly />
          </Form.Item>
          <Form.Item
            label="M·∫≠t kh·∫©u"
            name="password"
            rules={[{ required: true, message: "Ch∆∞a nh·∫≠p m·∫≠t kh·∫©u" }]}
            hasFeedback
          >
            <Input />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}
